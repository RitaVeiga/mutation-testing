import mutation.ConstantMutator;
import weaver.WeaverJps;
import lara.Check;
import mutation.TestResources;
import kadabra.KadabraNodes;

/**
 * @test
 */
function testConstantMutator() {

	var mutators = [];
	
	var actualOutput = "";
	
	mutators.push(new ConstantMutator(KadabraNodes.literal("1", "int")));
	mutators.push(new ConstantMutator(KadabraNodes.literal("0", "int")));
	mutators.push(new ConstantMutator(KadabraNodes.literal("-1", "int")));
	
	//* (-1)
	mutators.push(new ConstantMutator(
		function($expr) {
				var newValue = Number($expr); 
				//newValue = newValue.substring(0, newValue.length-1);
				newValue = newValue * (-1); 
				return KadabraNodes.literal(newValue.toString(),"int");
		}
	));
	
	//+ 1
	mutators.push(new ConstantMutator(
		function($expr) {
				var newValue = Number($expr); 
				newValue = newValue + 1; 
				return KadabraNodes.literal(newValue.toString(),"int");
		}
	));
	
	//- 1
	mutators.push(new ConstantMutator(
		function($expr) {
				var newValue = Number($expr); 
				newValue = newValue - 1; 
				return KadabraNodes.literal(newValue.toString(),"int");
		}
	));
	
		for(mutator of mutators ) {
				   while(mutator.hasMutations()) {
		
					// Mutate
					mutator.mutate();
					// Print
					actualOutput += mutator.getMutationPoint().parent.code + "\n";
					// Restore operator
					mutator.restore();
				   	
				    }
		}

	Check.strings(actualOutput, TestResources.getString("ConstantsMutator.output"));
}