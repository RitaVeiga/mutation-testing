import kadabra.KadabraAst;
import kadabra.KadabraNodes;

import lara.mutation.MutationGenerator;
import lara.actions.LaraActions;

import lara.Check;

/**
 *
 * Generates a mutation related with a single binary operator.
 *
 * @class
 */
var BinaryMutator = function(originalBinaryOperator, binaryOperator) {
	
	Check.isString(binaryOperator);
	if(!KadabraAst.getBinaryOperators().has(binaryOperator)) {
		throw "Invalid binary operator '" + binaryOperator + "'. Available operators: " + KadabraAst.getBinaryOperators().values();
	}

	// Support "undefined" string
	originalBinaryOperator = originalBinaryOperator === "undefined" ? undefined : originalBinaryOperator;
	
	if(originalBinaryOperator !== undefined) {
		Check.isString(originalBinaryOperator);
		if(!KadabraAst.getBinaryOperators().has(originalBinaryOperator)) {
			throw "Invalid binary operator '" + originalBinaryOperator + "'. Available operators: " + KadabraAst.getBinaryOperators().values();
		}		
		
		if(originalBinaryOperator === binaryOperator) {
			throw "Original binary operator and new binary operator must be different";		
		}
	}

	
	var originalOpName = originalBinaryOperator !== undefined ? originalBinaryOperator : "all";
	var name = "BinaryMutator_" + originalOpName + "_to_" + binaryOperator;

	// Parent constructor
	MutationGenerator.call(this, name);
	
	this.binaryOperator = binaryOperator;
	this.originalBinaryOperator = originalBinaryOperator;	
};

BinaryMutator.prototype.getType = function(){
	return "BinaryMutator";
}

// Inheritance
BinaryMutator.prototype = Object.create(MutationGenerator.prototype);

BinaryMutator.prototype.getOp = function() {
	return this.binaryOperator;
}

BinaryMutator.prototype.getOriginalOp = function() {
	return this.originalBinaryOperator;
}

/*** IMPLEMENTATION OF INSTANCE METHODS ***/

BinaryMutator.prototype.isMutationPoint = function($jp) {
	// Check if binary expression
	if(!$jp.instanceOf("binaryExpression")) {
		return false;
	}
	

	
	if(this.originalBinaryOperator === undefined) {
		// Check if it not the same operator
		if($jp.operator === this.binaryOperator) {
			return false;
		}	
	} else {
		// Check if it is the target operator
		if($jp.operator != this.originalBinaryOperator) {
			return false;
		}
	}
	
	
	
	// TODO: Check if operator is "compatible". For instance, we cannot replace a boolean operator (e.g., &&) with an arithmetic operator (e.g., +)
	
	return true;

}

BinaryMutator.prototype._mutatePrivate = function($jp) {
	// Create a BinaryExpression node
	var $newOp = KadabraNodes.binaryExpression(this.binaryOperator, $jp.lhs.copy(), $jp.rhs.copy());
	
	// Replace given node
	var replaceAction = LaraActions.replaceJp($jp, $newOp);
	//println("Is newOp parent init? " + $newOp.getNode().isParentInitialized());

	
	return replaceAction.getPoint();
}
