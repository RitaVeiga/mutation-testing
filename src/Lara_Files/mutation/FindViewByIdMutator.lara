import lara.mutation.Mutator;
import kadabra.KadabraNodes;
import weaver.WeaverJps;
import weaver.Weaver;

var FindViewByIdMutator = function($result, $original) {
    // Parent constructor
    Mutator.call(this);

    this.$expr = $result;

    this.mutationPoints = [];

    for(var $field of WeaverJps.search('binaryExpression').get()) {

        if(!FindViewByIdMutator._isCompatible($field.operator, $original)) {
            continue;
        }

        this.mutationPoints.push($field);

    }

    this.currentIndex = 0;
    this.mutationPoint = undefined;
    this.previousValue = undefined;

};

// Inheritance
FindViewByIdMutator.prototype = Object.create(Mutator.prototype);

FindViewByIdMutator._isCompatible = function(type1, type2) {
    return type1 === type2;
}

/*** IMPLEMENTATION OF INSTANCE METHODS ***/
FindViewByIdMutator.prototype.hasMutations = function() {
    return this.currentIndex < this.mutationPoints.length;
}

FindViewByIdMutator.prototype.getMutationPoint = function() {
    if (this.isMutated) {
        return this.mutationPoint;
    } else {
        if (this.currentIndex < this.mutationPoints.length) {
            return this.mutationPoints[this.currentIndex];
        } else {
            return undefined;
        }
    }
}

FindViewByIdMutator.prototype._mutatePrivate = function() {

    this.mutationPoint = this.mutationPoints[this.currentIndex];
    this.currentIndex++;

    if(isFunction(this.$expr)){
        //TODO: Change
        var temp = this.$expr(this.mutationPoint);
        this.mutationPoint = this.mutationPoint.insertReplace(temp);
    }else{
        this.previousValue = this.mutationPoint.copy;
        this.mutationPoint.operator = this.$expr;
    }

    println("/*--------------------------------------*/");
    println("Mutating operator n."+ this.currentIndex + ": "+ this.previousValue +" to "+ this.mutationPoint);
    println("/*--------------------------------------*/");

}

FindViewByIdMutator.prototype._restorePrivate = function() {
    // Restore operator
    println("Restoring: " + this.mutationPoint.operator + " to " + this.previousValue.operator);
    this.mutationPoint.operator = this.previousValue.operator;
    this.previousValue = undefined;
    this.mutationPoint = undefined;
}