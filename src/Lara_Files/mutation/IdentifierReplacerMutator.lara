import lara.mutation.Mutator;
import kadabra.KadabraNodes;
import weaver.WeaverJps;
import weaver.Weaver;

var IdentifierReplacerMutator = function($result, $original) {
    // Parent constructor
    Mutator.call(this);

    this.$expr = $result;

    this.mutationPoints = [];

    //To store the identifiers according to the package
    this.identifiersMap = new Map();

    //To get the mutation points and identifiers
    for(var $expression of WeaverJps.search('expression', {code: /^R\..*/}).get()) { //Searching for every expression that starts by R.
        for(var $desc of $expression.descendants)
            if($desc.type === "Package"){
                var tempList = this.identifiersMap.get($desc.toString);

                if(tempList === undefined){ //Creating or updating the entry
                    tempList = [$expression];
                }else{
                    tempList.push($expression);
                }

                this.identifiersMap.set($desc.toString, tempList); //Saving the entry
            }
    }


    for(var value of this.identifiersMap.values())
        if(value.length > 1)
            for(var item of value)
                this.mutationPoints.push(item);

    this.currentIndex = 0;
    this.mutationPoint = undefined;
    this.previousValue = undefined;

};

// Inheritance
IdentifierReplacerMutator.prototype = Object.create(Mutator.prototype);

IdentifierReplacerMutator._isCompatible = function(type1, type2) {
    return type1 === type2;
}

/*** IMPLEMENTATION OF INSTANCE METHODS ***/
IdentifierReplacerMutator.prototype.hasMutations = function() {
    return this.currentIndex < this.mutationPoints.length;
}

IdentifierReplacerMutator.prototype.getMutationPoint = function() {
    if (this.isMutated) {
        return this.mutationPoint;
    } else {
        if (this.currentIndex < this.mutationPoints.length) {
            return this.mutationPoints[this.currentIndex];
        } else {
            return undefined;
        }
    }
}

    IdentifierReplacerMutator.prototype._mutatePrivate = function() {

    this.mutationPoint = this.mutationPoints[this.currentIndex];
    this.currentIndex++;

    this.previousValue = this.mutationPoint.copy();

    for(var $desc of this.mutationPoint.descendants)
        if($desc.type === "Package") {
            var tempList = this.identifiersMap.get($desc.toString);

            var indexOfMutationPoint = tempList.indexOf(this.mutationPoint);

            if(indexOfMutationPoint < tempList.length-1)
                this.mutationPoint = this.mutationPoint.insertReplace(tempList[indexOfMutationPoint + 1].copy());
            else
                this.mutationPoint = this.mutationPoint.insertReplace(tempList[0].copy());
            break;
        }



    println("/*--------------------------------------*/");
    println("Mutating operator n." + this.currentIndex + ": " + this.previousValue + " to " + this.mutationPoint);
    println("/*--------------------------------------*/");

}

IdentifierReplacerMutator.prototype._restorePrivate = function() {
    // Restore operator
    println("Restoring: " + this.mutationPoint + " to " + this.previousValue);
    this.mutationPoint = this.mutationPoint.insertReplace(this.previousValue).copy();
    this.previousValue = undefined;
    this.mutationPoint = undefined;
}