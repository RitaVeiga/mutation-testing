import lara.Io;
import Mutators;
import lara.mutation.MutationGenerator;

aspectdef Test
input outputPath end

var counter = 0;

if(Mutators[0] === undefined){
	println("No mutators selected");
	return;
}
var fileName;
for(mutation of Mutators){

	for(var $jp of Query.search()) {
		if (mutation instanceof MutationGenerator) {
			fileName = $jp.ancestor("file") === undefined ? "NOFILENAME" : $jp.ancestor("file").name;
			// Get id of current version
			var beforeMutationVersion = Actions.getCurrentId();

			var $mutatedJp = mutation.mutate($jp);
			if ($mutatedJp !== undefined) {
				println("JP ORIG: " + $jp.code);
				println("JP MUTATED: " + $mutatedJp.code);
				saveFile();
			} else


				// Restore version
				Actions.restore(beforeMutationVersion);
		} else{
			if(mutation.addJp($jp)) {
				var fileName = $jp.ancestor("file") === undefined ? "NOFILENAME" : $jp.ancestor("file").name;
				try{
					println("New mutation point of type " + mutation.getType() + " on: "+ $jp + " file " + fileName + " line " + $jp.line);
				}catch (e) {
					try {
						println("New mutation point of type " + mutation.getType() + " on: "+ $jp.parent + " file " + fileName + " line " + $jp.parent.line);
					} catch (ee) {
						//println(ee);
					}
				}
			}
		}
	}
	if (!(mutation instanceof MutationGenerator)){
		while(mutation.hasMutations()) {

			// Mutate
			mutation.mutate();

			saveFile();

			mutation.restore();

		}

	}
}

function saveFile(){

	var outputFolder = Io.getPath(outputPath+ Io.getSeparator() +fileName + "_" + counter + Io.getSeparator() +"src"+ Io.getSeparator() +"main"+ Io.getSeparator() +"java");
	counter++;

	// Write modified code
	Weaver.writeCode(outputFolder);
}
end