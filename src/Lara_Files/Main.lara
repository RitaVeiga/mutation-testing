import lara.Io;
import Mutators;

aspectdef Test
input outputPath end

	var counter = 0;
	var identifiersList = new Object();

	identifiersList.identifiers = [];

	if(Mutators[0] === undefined){
		println("No mutators selected");
		return;
	}

	for(mutator of Mutators){
		while(mutator.hasMutations()) {

			// Mutate
			mutator.mutate();
			// Print
			var identifier = new Object();

			var mutated = mutator.getMutationPoint().isStatement ? mutator.getMutationPoint() : mutator.getMutationPoint().ancestor("statement");

			identifier.file = mutated.ancestor("file").name;
			identifier.line  = mutated.line;
			identifier.id = identifier.file+"_"+identifier.line+"_"+counter; // TODO: Add mutator type to identifier name

			mutator.getMutationPoint().insertBefore(
				"if(System.getenv(\"MutKey\") == \""+ identifier.id +"\"){\n" +
				mutated.srcCode +
				"\n}else{\n"
			);

			identifiersList.identifiers.push(identifier);
			counter++;

			mutator.getMutationPoint().insertAfter("}");
			//println(mutator.getMutationPoint().parent.code);

			// Restore operator
			mutator.restore();

		}
	}
	saveFile();

function saveFile(){
	var outputFolder = Io.mkdir("./mutatedFiles/");
	Io.deleteFolderContents(outputFolder);

// Write modified code
	Weaver.writeCode(outputFolder);

// Print contents
	for(var mutatedFile of Io.getFiles(outputFolder, "*.java") ) {
		println("<File '" + mutatedFile.getName() + "'>");
		println(Io.readFile(mutatedFile));
	}

	Io.writeJson("mutantsIdentifiers.json", identifiersList );

	Io.deleteFolder(outputFolder);
}
end